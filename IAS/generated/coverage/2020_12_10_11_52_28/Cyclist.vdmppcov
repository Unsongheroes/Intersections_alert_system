class Cyclist is subclass of Transmitter

instance variables
alert: seq of (Alerttype * activeAlert);

values
type: Transmittertype = <Cyclist>;

operations 

public Cyclist : nat * real * real ==> Cyclist
Cyclist(pid, pointx, pointy) == (
Transmitter`constructor(pid, new Point(pointx, pointy));
alert := [mk_(<None>, <Off>)];
);

public setalertactive: Alerttype * activeAlert ==> ()
setalertactive(palerttype, palertactivity) == (
alert := alert ^ [mk_(palerttype, palertactivity)];
if(len alert > 3) then alert := tl alert;
CyclistAlerted());

public CyclistAlerted : () ==> ()
CyclistAlerted() == 
(

	IO`printf("%s with id: %s received an alert: %s \n",[type, id,  alert(len alert)]);
);

public getalert: () ==> (Alerttype * activeAlert) 
getalert() == return alert(len alert);






pure public gettype: () ==> Transmittertype
gettype() == 
return type;



functions


end Cyclist